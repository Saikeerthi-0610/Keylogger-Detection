
import tkinter as tk
from tkinter import ttk, messagebox
import psutil  # type: ignore
from pynput import keyboard  # type: ignore
from datetime import datetime
import threading

class KeyloggerDetectionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Keylogger Detection App")
        self.root.geometry("950x600")
        self.root.configure(bg="#1e1e1e")

        try:
            self.root.iconbitmap("app_icon.ico")
        except Exception:
            print("[!] Icon not found. Place 'app_icon.ico' in the same folder.")

        # Notebook (tabs)
        self.tab_control = ttk.Notebook(root)
        self.tab_control.pack(expand=1, fill="both")

        # Tabs
        self.detection_tab = tk.Frame(self.tab_control, bg="#1e1e1e")
        self.recorder_tab = tk.Frame(self.tab_control, bg="#1e1e1e")

        self.tab_control.add(self.detection_tab, text="Detection Dashboard")
        self.tab_control.add(self.recorder_tab, text="Keylogger Recorder")

        # ✅ Apply dark style for Treeview
        style = ttk.Style()
        style.theme_use("default")
        style.configure(
            "Treeview",
            background="#1e1e1e",
            foreground="white",
            fieldbackground="#1e1e1e",
            rowheight=25
        )
        style.map("Treeview",
                  background=[("selected", "#00ffcc")],
                  foreground=[("selected", "black")])

        # Build Tabs
        self.build_detection_tab()
        self.build_recorder_tab()

    # ---------------- Tab 1: Detection Dashboard ----------------
    def build_detection_tab(self):
        columns = ("PID", "Name", "Executable", "Command Line")
        self.tree = ttk.Treeview(
            self.detection_tab,
            columns=columns,
            show="headings",
            height=20
        )

        for col in columns:
            self.tree.heading(col, text=col, anchor="w")

        self.tree.column("PID", width=80, anchor="center")
        self.tree.column("Name", width=120, anchor="w")
        self.tree.column("Executable", width=300, anchor="w")
        self.tree.column("Command Line", width=350, anchor="w")

        self.tree.pack(fill="both", expand=True, padx=10, pady=10)

        btn_frame = tk.Frame(self.detection_tab, bg="#1e1e1e")
        btn_frame.pack(pady=5)

        self.kill_btn = tk.Button(
            btn_frame, text="Kill Selected",
            command=self.kill_selected,
            width=15, height=1
        )
        self.kill_btn.grid(row=0, column=0, padx=5)

        self.start_scan_btn = tk.Button(
            btn_frame, text="Start Scanning",
            command=self.scan_processes_snapshot,
            width=15, height=1
        )
        self.start_scan_btn.grid(row=0, column=1, padx=5)

        self.stop_scan_btn = tk.Button(
            btn_frame, text="Stop Scanning",
            command=self.stop_scanning,
            width=15, height=1
        )
        self.stop_scan_btn.grid(row=0, column=2, padx=5)

        self.status_label = tk.Label(
            self.detection_tab,
            text="Status: Idle (Not Scanning)",
            anchor="w", bg="#1e1e1e", fg="yellow"
        )
        self.status_label.pack(fill="x", side="bottom")

    def scan_processes_snapshot(self):
        for item in self.tree.get_children():
            self.tree.delete(item)

        detected_count = 0
        try:
            for proc in psutil.process_iter(attrs=["pid", "name", "exe", "cmdline"]):
                try:
                    pid = proc.info.get("pid", "")
                    name = proc.info.get("name", "")
                    exe = proc.info.get("exe", "")
                    cmdline = proc.info.get("cmdline", "")

                    if isinstance(cmdline, list):
                        cmdline = " ".join(cmdline)
                    elif not isinstance(cmdline, str):
                        cmdline = str(cmdline)

                    if exe:
                        self.tree.insert("", "end", values=(pid, name, exe, cmdline))
                        detected_count += 1
                except (psutil.AccessDenied, psutil.ZombieProcess, psutil.NoSuchProcess, PermissionError):
                    continue
        except Exception as e:
            print(f"[!] Error scanning processes: {e}")

        self.status_label.config(
            text=f"Last Scan: {detected_count} processes detected"
        )

    def stop_scanning(self):
        self.status_label.config(text="Status: Idle (Not Scanning)")
        messagebox.showinfo("Info", "Scanning stopped.")

    def kill_selected(self):
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("Warning", "No process selected!")
            return
        for item in selected:
            pid = self.tree.item(item, "values")[0]
            try:
                psutil.Process(int(pid)).terminate()
                messagebox.showinfo("Success", f"Process {pid} killed successfully.")
            except Exception as e:
                messagebox.showerror("Error", f"Could not kill process {pid}\n{e}")

    # ---------------- Tab 2: Keylogger Recorder ----------------
    def build_recorder_tab(self):
        self.log_display = tk.Text(
            self.recorder_tab,
            width=100, height=25,
            bg="#1e1e1e", fg="#00ffcc",
            font=("Consolas", 11),
            insertbackground="white"
        )
        self.log_display.pack(padx=10, pady=10, fill="both", expand=True)

        btn_frame = tk.Frame(self.recorder_tab, bg="#1e1e1e")
        btn_frame.pack(pady=10)

        self.start_btn = tk.Button(btn_frame, text="Start Keylogger", width=15, command=self.start_keylogger)
        self.start_btn.grid(row=0, column=0, padx=10)

        self.stop_btn = tk.Button(btn_frame, text="Stop Keylogger", width=15, command=self.stop_keylogger)
        self.stop_btn.grid(row=0, column=1, padx=10)

        self.save_btn = tk.Button(btn_frame, text="Save Log to File", width=15, command=self.save_log)
        self.save_btn.grid(row=0, column=2, padx=10)

        self.status_label2 = tk.Label(self.recorder_tab, text="", fg="cyan", bg="#1e1e1e", font=("Arial", 10))
        self.status_label2.pack()

        self.listener = None
        self.log_data = []

    def start_keylogger(self):
        if self.listener and self.listener.running:
            messagebox.showinfo("Info", "Keylogger already running!")
            return

        def on_press(key):
            try:
                k = key.char
                if k is None:
                    k = str(key)
            except AttributeError:
                k = str(key)

            log_entry = f"[{datetime.now().strftime('%H:%M:%S')}] {k}\n"
            self.log_data.append(log_entry)
            self.log_display.insert(tk.END, log_entry)
            self.log_display.see(tk.END)

        self.listener = keyboard.Listener(on_press=on_press)
        threading.Thread(target=self.listener.start, daemon=True).start()
        self.status_label2.config(text="✓ Keylogger started")

    def stop_keylogger(self):
        if self.listener and self.listener.running:
            self.listener.stop()
            self.status_label2.config(text="✗ Keylogger stopped")
        else:
            messagebox.showinfo("Info", "Keylogger is not running.")

    def save_log(self):
        if not self.log_data:
            messagebox.showwarning("Warning", "No logs to save!")
            return
        filename = "saved_keylog.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.writelines(self.log_data)
        self.status_label2.config(text=f"✓ Log saved to '{filename}'")


if __name__ == "__main__":
    root = tk.Tk()
    app = KeyloggerDetectionApp(root)
    root.mainloop()

